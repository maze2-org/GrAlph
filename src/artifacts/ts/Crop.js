"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CropInstance = exports.Crop = void 0;
const web3_1 = require("@alephium/web3");
const Crop_ral_json_1 = __importDefault(require("../farm/Crop.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = { MetadataUpdated: 0 };
        this.consts = {
            ErrorCodes: {
                OnlyParentAllowed: BigInt("0"),
                NFTNotFound: BigInt("1"),
                NFTNotPartOfCollection: BigInt("2"),
                OnlyNftOwnerAllowed: BigInt("3"),
                NameHasNotExpired: BigInt("4"),
                CannotRenewName: BigInt("5"),
                TokenAlreadyGenerated: BigInt("6"),
                ReverseAddressNotFound: BigInt("7"),
                OnlyNftOwnerOrHolderAllowed: BigInt("8"),
                IncorrectFarmInputAmount: BigInt("9"),
                CropHasNotExpired: BigInt("10"),
                FarmInputAmountNotConsumed: BigInt("11"),
                FarmAlreadyGenerated: BigInt("12"),
            },
            Keys: { Names: "01", Token: "02", Farm: "03" },
        };
        this.tests = {
            getTokenUri: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getTokenUri", params, contracts_1.getContractByCodeHash);
            }),
            getCollectionIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getCollectionIndex", params, contracts_1.getContractByCodeHash);
            }),
            getName: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getName", params, contracts_1.getContractByCodeHash);
            }),
            getDescription: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getDescription", params, contracts_1.getContractByCodeHash);
            }),
            getImage: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getImage", params, contracts_1.getContractByCodeHash);
            }),
            getTraitCount: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getTraitCount", params, contracts_1.getContractByCodeHash);
            }),
            getTraitAtIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getTraitAtIndex", params, contracts_1.getContractByCodeHash);
            }),
            getNFTIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getNFTIndex", params, contracts_1.getContractByCodeHash);
            }),
            getExpires: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getExpires", params, contracts_1.getContractByCodeHash);
            }),
            getAlphAmount: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getAlphAmount", params, contracts_1.getContractByCodeHash);
            }),
            setExpires: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "setExpires", params, contracts_1.getContractByCodeHash);
            }),
            delete: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "delete", params, contracts_1.getContractByCodeHash);
            }),
            getTraits: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.testMethod)(this, "getTraits", params, contracts_1.getContractByCodeHash);
            }),
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new CropInstance(address);
    }
}
// Use this object to test and deploy the contract
exports.Crop = new Factory(web3_1.Contract.fromJson(Crop_ral_json_1.default, "", "1b2f163495ed25072e283e298f15097b0299fd16e910722521cda99deeb877a0", types_1.AllStructs));
// Use this class to interact with the blockchain
class CropInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getTokenUri: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getTokenUri", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getCollectionIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getCollectionIndex", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getName: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getName", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getDescription: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getDescription", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getImage: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getImage", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getTraitCount: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getTraitCount", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getTraitAtIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getTraitAtIndex", params, contracts_1.getContractByCodeHash);
            }),
            getNFTIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getNFTIndex", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getExpires: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getExpires", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            getAlphAmount: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getAlphAmount", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
            setExpires: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "setExpires", params, contracts_1.getContractByCodeHash);
            }),
            delete: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "delete", params, contracts_1.getContractByCodeHash);
            }),
            getTraits: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.callMethod)(exports.Crop, this, "getTraits", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            }),
        };
        this.transact = {
            getTokenUri: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getTokenUri", params);
            }),
            getCollectionIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getCollectionIndex", params);
            }),
            getName: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getName", params);
            }),
            getDescription: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getDescription", params);
            }),
            getImage: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getImage", params);
            }),
            getTraitCount: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getTraitCount", params);
            }),
            getTraitAtIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getTraitAtIndex", params);
            }),
            getNFTIndex: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getNFTIndex", params);
            }),
            getExpires: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getExpires", params);
            }),
            getAlphAmount: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getAlphAmount", params);
            }),
            setExpires: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "setExpires", params);
            }),
            delete: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "delete", params);
            }),
            getTraits: (params) => __awaiter(this, void 0, void 0, function* () {
                return (0, web3_1.signExecuteMethod)(exports.Crop, this, "getTraits", params);
            }),
        };
    }
    fetchState() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, web3_1.fetchContractState)(exports.Crop, this);
        });
    }
    getContractEventsCurrentCount() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, web3_1.getContractEventsCurrentCount)(this.address);
        });
    }
    subscribeMetadataUpdatedEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Crop.contract, this, options, "MetadataUpdated", fromCount);
    }
    multicall(...callss) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield (0, web3_1.multicallMethods)(exports.Crop, this, callss, contracts_1.getContractByCodeHash));
        });
    }
}
exports.CropInstance = CropInstance;
